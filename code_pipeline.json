{
  "Resources": {
    "UdacityProject4Pipeline": {
      "Type": "AWS::CodePipeline::Pipeline",
      "Properties": {
        "RoleArn": {
          "Fn::GetAtt": ["UdacityProject4PipelineRole", "Arn"]
        },
        "Stages": [
          {
            "Name": "Source",
            "Actions": [
              {
                "Name": "SourceAction",
                "ActionTypeId": {
                  "Category": "Source",
                  "Owner": "ThirdParty",
                  "Provider": "GitHub",
                  "Version": "1"
                },
                "Configuration": {
                  "Owner": {
                    "Ref": "GithubUsername"
                  },
                  "Repo": {
                    "Ref": "GithubRepositoryName"
                  },
                  "OAuthToken": {
                    "Ref": "GithubAccessToken"
                  },
                  "Branch": "master"
                },
                "OutputArtifacts": [
                  {
                    "Name": "App"
                  }
                ]
              }
            ]
          },
          {
            "Name": "Build",
            "Actions": [
              {
                "Name": "BuildAction",
                "ActionTypeId": {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "Configuration": {
                  "ProjectName": {
                    "Ref": "UdacityProject4Build"
                  }
                },
                "InputArtifacts": [
                  {
                    "Name": "App"
                  }
                ],
                "OutputArtifacts": [
                  {
                    "Name": "AppBuildResult"
                  }
                ]
              }
            ]
          }
        ],
        "ArtifactStore": {
          "Type": "S3",
          "Location": {
            "Ref": "UdacityProject4ArtifactsBucket"
          }
        }
      },
      "DependsOn": "UdacityProject4Build"
    },
    "UdacityProject4Build": {
      "Type": "AWS::CodeBuild::Project",
      "Properties": {
        "Artifacts": {
          "Type": "CODEPIPELINE"
        },
        "Source": {
          "Type": "CODEPIPELINE"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "Image": "aws/codebuild/standard:7.0",
          "Type": "LINUX_CONTAINER",
          "EnvironmentVariables": [
            {
              "Name": "REPOSITORY_URI",
              "Value": {
                "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${UdacityProject4Ecr}"
              }
            },
            {
              "Name": "EKS_CLUSTER_NAME",
              "Value": {
                "Ref": "EKSClusterName"
              }
            },
            {
              "Name": "EKS_KUBECTL_ROLE",
              "Value": {
                "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${KubectlRole}"
              }
            }
          ]
        },
        "ServiceRole": {
          "Fn::GetAtt": ["UdacityProject4BuildRole", "Arn"]
        }
      },
      "DependsOn": "UdacityProjec4KubectlAssumeRole"
    },
    "UdacityProject4Lambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "import json\nimport boto3\nfrom botocore.vendored import requests\ndef handler(event, context):\n  response = {\n    'Status': 'SUCCESS',\n    'Reason': 'See the details in CloudWatch Log Stream: ' + context.log_stream_name,\n    'PhysicalResourceId': context.log_stream_name,\n    'StackId': event['StackId'],\n    'RequestId': event['RequestId'],\n    'LogicalResourceId': event['LogicalResourceId'],\n    'Data': {'Message': 'Resource creation successful!'},\n  }\n\n  client = boto3.client('iam')\n  try:\n    if event['RequestType'] == 'Create':\n      kubectl_role_name = event['ResourceProperties']['KubectlRole']\n      build_role_arn = event['ResourceProperties']['CodeBuildServiceRoleArn']\n\n      assume = client.get_role(RoleName = kubectl_role_name)\n      assume_doc = assume['Role']['AssumeRolePolicyDocument']\n      roles = [ { 'Effect': 'Allow', 'Principal': { 'AWS': build_role_arn }, 'Action': 'sts:AssumeRole' } ]\n\n      for statement in assume_doc['Statement']:\n        if 'AWS' in statement['Principal']:\n          if statement['Principal']['AWS'].startswith('arn:aws:iam:'):\n            roles.append(statement)\n\n      assume_doc['Statement'] = roles\n      update_response = client.update_assume_role_policy(RoleName = kubectl_role_name, PolicyDocument = json.dumps(assume_doc))\n  except Exception as e:\n    print(e)\n    response['Status'] = 'FAILED'\n    response['Reason'] = e\n    response['Data'] = {'Message': 'Resource creation failed'}\n\n  response_body = json.dumps(response)\n  headers = {'content-type': '', 'content-length': str(len(response_body)) }\n  put_response = requests.put(event['ResponseURL'], headers=headers, data=response_body)\n  return response"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": ["UdacityProject4LambdaExecutionRole", "Arn"]
        },
        "Runtime": "python3.11",
        "Timeout": 300
      }
    },
    "UdacityProject4Ecr": {
      "Type": "AWS::ECR::Repository",
      "DeletionPolicy": "Retain"
    },
    "UdacityProject4ArtifactsBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain"
    },
    "UdacityProject4PipelineRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "codepipeline.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "CodePipelineAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Resource": "*",
                  "Effect": "Allow",
                  "Action": [
                    "codebuild:StartBuild",
                    "codebuild:BatchGetBuilds",
                    "codecommit:GetBranch",
                    "codecommit:GetCommit",
                    "codecommit:UploadArchive",
                    "codecommit:GetUploadArchiveStatus",
                    "codecommit:CancelUploadArchive",
                    "iam:PassRole"
                  ]
                },
                {
                  "Resource": {
                    "Fn::Sub": "arn:aws:s3:::${UdacityProject4ArtifactsBucket}/*"
                  },
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:GetObjectVersion",
                    "s3:GetBucketVersioning"
                  ]
                }
              ]
            }
          }
        ]
      },
      "DependsOn": "UdacityProject4ArtifactsBucket"
    },
    "UdacityProject4BuildRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "CodebuildAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Resource": {
                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${KubectlRole}"
                  },
                  "Effect": "Allow",
                  "Action": "sts:AssumeRole"
                },
                {
                  "Resource": "*",
                  "Effect": "Allow",
                  "Action": [
                    "eks:Describe*",
                    "ssm:GetParameters",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "ecr:GetAuthorizationToken",
                    "ec2:CreateNetworkInterface",
                    "ec2:DesribeDhcpOptions",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterfaces",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeVpcs",
                    "ec2:CreateNetworkInterfacePermission"
                  ]
                },
                {
                  "Resource": {
                    "Fn::Sub": "arn:aws:s3:::${UdacityProject4ArtifactsBucket}/*"
                  },
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:GetObjectVersion"
                  ]
                },
                {
                  "Resource": {
                    "Fn::Sub": "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${UdacityProject4Ecr}"
                  },
                  "Effect": "Allow",
                  "Action": [
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:PutImage",
                    "ecr:InitiateLayerUpload",
                    "ecr:UploadLayerPart",
                    "ecr:CompleteLayerUpload"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "UdacityProject4LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess"
        ],
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "CodePipelineAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Resource": {
                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${KubectlRole}"
                  },
                  "Effect": "Allow",
                  "Action": ["iam:GetRole", "iam:UpdateAssumeRolePolicy"]
                }
              ]
            }
          }
        ]
      }
    },
    "UdacityProjec4KubectlAssumeRole": {
      "Type": "Custom::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": ["UdacityProject4Lambda", "Arn"]
        },
        "KubectlRole": {
          "Ref": "KubectlRole"
        },
        "CodeBuildServiceRoleArn": {
          "Fn::GetAtt": ["UdacityProject4BuildRole", "Arn"]
        }
      },
      "DependsOn": ["UdacityProject4Lambda", "UdacityProject4BuildRole"]
    }
  },
  "Parameters": {
    "GithubUsername": {
      "Type": "String",
      "Default": "your_github_account",
      "Description": "Your github account that contains repository you want to setup codepipeline source stage"
    },
    "GithubRepositoryName": {
      "Type": "String",
      "Default": "your_repository",
      "Description": "Name of repository which you want to setup codepipeline source stage"
    },
    "GithubAccessToken": {
      "Type": "String",
      "Default": "your_accesstoken",
      "Description": "Access token you got from github"
    },
    "KubectlRole": {
      "Type": "String",
      "Default": "your_kubectl_rolename",
      "Description": "Name of kubectl role"
    },
    "EKSClusterName": {
      "Type": "String",
      "Default": "demo",
      "Description": "The name of EKS which you created on aws console"
    }
  }
}
